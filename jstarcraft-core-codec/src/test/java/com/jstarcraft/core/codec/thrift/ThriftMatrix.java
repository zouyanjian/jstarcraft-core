/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jstarcraft.core.codec.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-24")
public class ThriftMatrix implements org.apache.thrift.TBase<ThriftMatrix, ThriftMatrix._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftMatrix> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftMatrix");

  private static final org.apache.thrift.protocol.TField ROW_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("rowSize", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("columnSize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ROW_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("rowPoints", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ROW_INDEXES_FIELD_DESC = new org.apache.thrift.protocol.TField("rowIndexes", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField COLUMN_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("columnPoints", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField COLUMN_INDEXES_FIELD_DESC = new org.apache.thrift.protocol.TField("columnIndexes", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TERM_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("termRows", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TERM_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("termColumns", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField TERM_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("termValues", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftMatrixStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftMatrixTupleSchemeFactory();

  public int rowSize; // required
  public int columnSize; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> rowPoints; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> rowIndexes; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> columnPoints; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> columnIndexes; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> termRows; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> termColumns; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> termValues; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROW_SIZE((short)1, "rowSize"),
    COLUMN_SIZE((short)2, "columnSize"),
    ROW_POINTS((short)3, "rowPoints"),
    ROW_INDEXES((short)4, "rowIndexes"),
    COLUMN_POINTS((short)5, "columnPoints"),
    COLUMN_INDEXES((short)6, "columnIndexes"),
    TERM_ROWS((short)7, "termRows"),
    TERM_COLUMNS((short)8, "termColumns"),
    TERM_VALUES((short)9, "termValues");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROW_SIZE
          return ROW_SIZE;
        case 2: // COLUMN_SIZE
          return COLUMN_SIZE;
        case 3: // ROW_POINTS
          return ROW_POINTS;
        case 4: // ROW_INDEXES
          return ROW_INDEXES;
        case 5: // COLUMN_POINTS
          return COLUMN_POINTS;
        case 6: // COLUMN_INDEXES
          return COLUMN_INDEXES;
        case 7: // TERM_ROWS
          return TERM_ROWS;
        case 8: // TERM_COLUMNS
          return TERM_COLUMNS;
        case 9: // TERM_VALUES
          return TERM_VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROWSIZE_ISSET_ID = 0;
  private static final int __COLUMNSIZE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROW_SIZE, new org.apache.thrift.meta_data.FieldMetaData("rowSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_SIZE, new org.apache.thrift.meta_data.FieldMetaData("columnSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROW_POINTS, new org.apache.thrift.meta_data.FieldMetaData("rowPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ROW_INDEXES, new org.apache.thrift.meta_data.FieldMetaData("rowIndexes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.COLUMN_POINTS, new org.apache.thrift.meta_data.FieldMetaData("columnPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.COLUMN_INDEXES, new org.apache.thrift.meta_data.FieldMetaData("columnIndexes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TERM_ROWS, new org.apache.thrift.meta_data.FieldMetaData("termRows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TERM_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("termColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TERM_VALUES, new org.apache.thrift.meta_data.FieldMetaData("termValues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftMatrix.class, metaDataMap);
  }

  public ThriftMatrix() {
  }

  public ThriftMatrix(
    int rowSize,
    int columnSize,
    java.util.List<java.lang.Integer> rowPoints,
    java.util.List<java.lang.Integer> rowIndexes,
    java.util.List<java.lang.Integer> columnPoints,
    java.util.List<java.lang.Integer> columnIndexes,
    java.util.List<java.lang.Integer> termRows,
    java.util.List<java.lang.Integer> termColumns,
    java.util.List<java.lang.Double> termValues)
  {
    this();
    this.rowSize = rowSize;
    setRowSizeIsSet(true);
    this.columnSize = columnSize;
    setColumnSizeIsSet(true);
    this.rowPoints = rowPoints;
    this.rowIndexes = rowIndexes;
    this.columnPoints = columnPoints;
    this.columnIndexes = columnIndexes;
    this.termRows = termRows;
    this.termColumns = termColumns;
    this.termValues = termValues;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftMatrix(ThriftMatrix other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rowSize = other.rowSize;
    this.columnSize = other.columnSize;
    if (other.isSetRowPoints()) {
      java.util.List<java.lang.Integer> __this__rowPoints = new java.util.ArrayList<java.lang.Integer>(other.rowPoints);
      this.rowPoints = __this__rowPoints;
    }
    if (other.isSetRowIndexes()) {
      java.util.List<java.lang.Integer> __this__rowIndexes = new java.util.ArrayList<java.lang.Integer>(other.rowIndexes);
      this.rowIndexes = __this__rowIndexes;
    }
    if (other.isSetColumnPoints()) {
      java.util.List<java.lang.Integer> __this__columnPoints = new java.util.ArrayList<java.lang.Integer>(other.columnPoints);
      this.columnPoints = __this__columnPoints;
    }
    if (other.isSetColumnIndexes()) {
      java.util.List<java.lang.Integer> __this__columnIndexes = new java.util.ArrayList<java.lang.Integer>(other.columnIndexes);
      this.columnIndexes = __this__columnIndexes;
    }
    if (other.isSetTermRows()) {
      java.util.List<java.lang.Integer> __this__termRows = new java.util.ArrayList<java.lang.Integer>(other.termRows);
      this.termRows = __this__termRows;
    }
    if (other.isSetTermColumns()) {
      java.util.List<java.lang.Integer> __this__termColumns = new java.util.ArrayList<java.lang.Integer>(other.termColumns);
      this.termColumns = __this__termColumns;
    }
    if (other.isSetTermValues()) {
      java.util.List<java.lang.Double> __this__termValues = new java.util.ArrayList<java.lang.Double>(other.termValues);
      this.termValues = __this__termValues;
    }
  }

  public ThriftMatrix deepCopy() {
    return new ThriftMatrix(this);
  }

  @Override
  public void clear() {
    setRowSizeIsSet(false);
    this.rowSize = 0;
    setColumnSizeIsSet(false);
    this.columnSize = 0;
    this.rowPoints = null;
    this.rowIndexes = null;
    this.columnPoints = null;
    this.columnIndexes = null;
    this.termRows = null;
    this.termColumns = null;
    this.termValues = null;
  }

  public int getRowSize() {
    return this.rowSize;
  }

  public ThriftMatrix setRowSize(int rowSize) {
    this.rowSize = rowSize;
    setRowSizeIsSet(true);
    return this;
  }

  public void unsetRowSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROWSIZE_ISSET_ID);
  }

  /** Returns true if field rowSize is set (has been assigned a value) and false otherwise */
  public boolean isSetRowSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROWSIZE_ISSET_ID);
  }

  public void setRowSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROWSIZE_ISSET_ID, value);
  }

  public int getColumnSize() {
    return this.columnSize;
  }

  public ThriftMatrix setColumnSize(int columnSize) {
    this.columnSize = columnSize;
    setColumnSizeIsSet(true);
    return this;
  }

  public void unsetColumnSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLUMNSIZE_ISSET_ID);
  }

  /** Returns true if field columnSize is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLUMNSIZE_ISSET_ID);
  }

  public void setColumnSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLUMNSIZE_ISSET_ID, value);
  }

  public int getRowPointsSize() {
    return (this.rowPoints == null) ? 0 : this.rowPoints.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getRowPointsIterator() {
    return (this.rowPoints == null) ? null : this.rowPoints.iterator();
  }

  public void addToRowPoints(int elem) {
    if (this.rowPoints == null) {
      this.rowPoints = new java.util.ArrayList<java.lang.Integer>();
    }
    this.rowPoints.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getRowPoints() {
    return this.rowPoints;
  }

  public ThriftMatrix setRowPoints(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> rowPoints) {
    this.rowPoints = rowPoints;
    return this;
  }

  public void unsetRowPoints() {
    this.rowPoints = null;
  }

  /** Returns true if field rowPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetRowPoints() {
    return this.rowPoints != null;
  }

  public void setRowPointsIsSet(boolean value) {
    if (!value) {
      this.rowPoints = null;
    }
  }

  public int getRowIndexesSize() {
    return (this.rowIndexes == null) ? 0 : this.rowIndexes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getRowIndexesIterator() {
    return (this.rowIndexes == null) ? null : this.rowIndexes.iterator();
  }

  public void addToRowIndexes(int elem) {
    if (this.rowIndexes == null) {
      this.rowIndexes = new java.util.ArrayList<java.lang.Integer>();
    }
    this.rowIndexes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getRowIndexes() {
    return this.rowIndexes;
  }

  public ThriftMatrix setRowIndexes(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> rowIndexes) {
    this.rowIndexes = rowIndexes;
    return this;
  }

  public void unsetRowIndexes() {
    this.rowIndexes = null;
  }

  /** Returns true if field rowIndexes is set (has been assigned a value) and false otherwise */
  public boolean isSetRowIndexes() {
    return this.rowIndexes != null;
  }

  public void setRowIndexesIsSet(boolean value) {
    if (!value) {
      this.rowIndexes = null;
    }
  }

  public int getColumnPointsSize() {
    return (this.columnPoints == null) ? 0 : this.columnPoints.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getColumnPointsIterator() {
    return (this.columnPoints == null) ? null : this.columnPoints.iterator();
  }

  public void addToColumnPoints(int elem) {
    if (this.columnPoints == null) {
      this.columnPoints = new java.util.ArrayList<java.lang.Integer>();
    }
    this.columnPoints.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getColumnPoints() {
    return this.columnPoints;
  }

  public ThriftMatrix setColumnPoints(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> columnPoints) {
    this.columnPoints = columnPoints;
    return this;
  }

  public void unsetColumnPoints() {
    this.columnPoints = null;
  }

  /** Returns true if field columnPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnPoints() {
    return this.columnPoints != null;
  }

  public void setColumnPointsIsSet(boolean value) {
    if (!value) {
      this.columnPoints = null;
    }
  }

  public int getColumnIndexesSize() {
    return (this.columnIndexes == null) ? 0 : this.columnIndexes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getColumnIndexesIterator() {
    return (this.columnIndexes == null) ? null : this.columnIndexes.iterator();
  }

  public void addToColumnIndexes(int elem) {
    if (this.columnIndexes == null) {
      this.columnIndexes = new java.util.ArrayList<java.lang.Integer>();
    }
    this.columnIndexes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getColumnIndexes() {
    return this.columnIndexes;
  }

  public ThriftMatrix setColumnIndexes(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> columnIndexes) {
    this.columnIndexes = columnIndexes;
    return this;
  }

  public void unsetColumnIndexes() {
    this.columnIndexes = null;
  }

  /** Returns true if field columnIndexes is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnIndexes() {
    return this.columnIndexes != null;
  }

  public void setColumnIndexesIsSet(boolean value) {
    if (!value) {
      this.columnIndexes = null;
    }
  }

  public int getTermRowsSize() {
    return (this.termRows == null) ? 0 : this.termRows.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getTermRowsIterator() {
    return (this.termRows == null) ? null : this.termRows.iterator();
  }

  public void addToTermRows(int elem) {
    if (this.termRows == null) {
      this.termRows = new java.util.ArrayList<java.lang.Integer>();
    }
    this.termRows.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getTermRows() {
    return this.termRows;
  }

  public ThriftMatrix setTermRows(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> termRows) {
    this.termRows = termRows;
    return this;
  }

  public void unsetTermRows() {
    this.termRows = null;
  }

  /** Returns true if field termRows is set (has been assigned a value) and false otherwise */
  public boolean isSetTermRows() {
    return this.termRows != null;
  }

  public void setTermRowsIsSet(boolean value) {
    if (!value) {
      this.termRows = null;
    }
  }

  public int getTermColumnsSize() {
    return (this.termColumns == null) ? 0 : this.termColumns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getTermColumnsIterator() {
    return (this.termColumns == null) ? null : this.termColumns.iterator();
  }

  public void addToTermColumns(int elem) {
    if (this.termColumns == null) {
      this.termColumns = new java.util.ArrayList<java.lang.Integer>();
    }
    this.termColumns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getTermColumns() {
    return this.termColumns;
  }

  public ThriftMatrix setTermColumns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> termColumns) {
    this.termColumns = termColumns;
    return this;
  }

  public void unsetTermColumns() {
    this.termColumns = null;
  }

  /** Returns true if field termColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetTermColumns() {
    return this.termColumns != null;
  }

  public void setTermColumnsIsSet(boolean value) {
    if (!value) {
      this.termColumns = null;
    }
  }

  public int getTermValuesSize() {
    return (this.termValues == null) ? 0 : this.termValues.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getTermValuesIterator() {
    return (this.termValues == null) ? null : this.termValues.iterator();
  }

  public void addToTermValues(double elem) {
    if (this.termValues == null) {
      this.termValues = new java.util.ArrayList<java.lang.Double>();
    }
    this.termValues.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getTermValues() {
    return this.termValues;
  }

  public ThriftMatrix setTermValues(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> termValues) {
    this.termValues = termValues;
    return this;
  }

  public void unsetTermValues() {
    this.termValues = null;
  }

  /** Returns true if field termValues is set (has been assigned a value) and false otherwise */
  public boolean isSetTermValues() {
    return this.termValues != null;
  }

  public void setTermValuesIsSet(boolean value) {
    if (!value) {
      this.termValues = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ROW_SIZE:
      if (value == null) {
        unsetRowSize();
      } else {
        setRowSize((java.lang.Integer)value);
      }
      break;

    case COLUMN_SIZE:
      if (value == null) {
        unsetColumnSize();
      } else {
        setColumnSize((java.lang.Integer)value);
      }
      break;

    case ROW_POINTS:
      if (value == null) {
        unsetRowPoints();
      } else {
        setRowPoints((java.util.List<java.lang.Integer>)value);
      }
      break;

    case ROW_INDEXES:
      if (value == null) {
        unsetRowIndexes();
      } else {
        setRowIndexes((java.util.List<java.lang.Integer>)value);
      }
      break;

    case COLUMN_POINTS:
      if (value == null) {
        unsetColumnPoints();
      } else {
        setColumnPoints((java.util.List<java.lang.Integer>)value);
      }
      break;

    case COLUMN_INDEXES:
      if (value == null) {
        unsetColumnIndexes();
      } else {
        setColumnIndexes((java.util.List<java.lang.Integer>)value);
      }
      break;

    case TERM_ROWS:
      if (value == null) {
        unsetTermRows();
      } else {
        setTermRows((java.util.List<java.lang.Integer>)value);
      }
      break;

    case TERM_COLUMNS:
      if (value == null) {
        unsetTermColumns();
      } else {
        setTermColumns((java.util.List<java.lang.Integer>)value);
      }
      break;

    case TERM_VALUES:
      if (value == null) {
        unsetTermValues();
      } else {
        setTermValues((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ROW_SIZE:
      return getRowSize();

    case COLUMN_SIZE:
      return getColumnSize();

    case ROW_POINTS:
      return getRowPoints();

    case ROW_INDEXES:
      return getRowIndexes();

    case COLUMN_POINTS:
      return getColumnPoints();

    case COLUMN_INDEXES:
      return getColumnIndexes();

    case TERM_ROWS:
      return getTermRows();

    case TERM_COLUMNS:
      return getTermColumns();

    case TERM_VALUES:
      return getTermValues();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ROW_SIZE:
      return isSetRowSize();
    case COLUMN_SIZE:
      return isSetColumnSize();
    case ROW_POINTS:
      return isSetRowPoints();
    case ROW_INDEXES:
      return isSetRowIndexes();
    case COLUMN_POINTS:
      return isSetColumnPoints();
    case COLUMN_INDEXES:
      return isSetColumnIndexes();
    case TERM_ROWS:
      return isSetTermRows();
    case TERM_COLUMNS:
      return isSetTermColumns();
    case TERM_VALUES:
      return isSetTermValues();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftMatrix)
      return this.equals((ThriftMatrix)that);
    return false;
  }

  public boolean equals(ThriftMatrix that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rowSize = true;
    boolean that_present_rowSize = true;
    if (this_present_rowSize || that_present_rowSize) {
      if (!(this_present_rowSize && that_present_rowSize))
        return false;
      if (this.rowSize != that.rowSize)
        return false;
    }

    boolean this_present_columnSize = true;
    boolean that_present_columnSize = true;
    if (this_present_columnSize || that_present_columnSize) {
      if (!(this_present_columnSize && that_present_columnSize))
        return false;
      if (this.columnSize != that.columnSize)
        return false;
    }

    boolean this_present_rowPoints = true && this.isSetRowPoints();
    boolean that_present_rowPoints = true && that.isSetRowPoints();
    if (this_present_rowPoints || that_present_rowPoints) {
      if (!(this_present_rowPoints && that_present_rowPoints))
        return false;
      if (!this.rowPoints.equals(that.rowPoints))
        return false;
    }

    boolean this_present_rowIndexes = true && this.isSetRowIndexes();
    boolean that_present_rowIndexes = true && that.isSetRowIndexes();
    if (this_present_rowIndexes || that_present_rowIndexes) {
      if (!(this_present_rowIndexes && that_present_rowIndexes))
        return false;
      if (!this.rowIndexes.equals(that.rowIndexes))
        return false;
    }

    boolean this_present_columnPoints = true && this.isSetColumnPoints();
    boolean that_present_columnPoints = true && that.isSetColumnPoints();
    if (this_present_columnPoints || that_present_columnPoints) {
      if (!(this_present_columnPoints && that_present_columnPoints))
        return false;
      if (!this.columnPoints.equals(that.columnPoints))
        return false;
    }

    boolean this_present_columnIndexes = true && this.isSetColumnIndexes();
    boolean that_present_columnIndexes = true && that.isSetColumnIndexes();
    if (this_present_columnIndexes || that_present_columnIndexes) {
      if (!(this_present_columnIndexes && that_present_columnIndexes))
        return false;
      if (!this.columnIndexes.equals(that.columnIndexes))
        return false;
    }

    boolean this_present_termRows = true && this.isSetTermRows();
    boolean that_present_termRows = true && that.isSetTermRows();
    if (this_present_termRows || that_present_termRows) {
      if (!(this_present_termRows && that_present_termRows))
        return false;
      if (!this.termRows.equals(that.termRows))
        return false;
    }

    boolean this_present_termColumns = true && this.isSetTermColumns();
    boolean that_present_termColumns = true && that.isSetTermColumns();
    if (this_present_termColumns || that_present_termColumns) {
      if (!(this_present_termColumns && that_present_termColumns))
        return false;
      if (!this.termColumns.equals(that.termColumns))
        return false;
    }

    boolean this_present_termValues = true && this.isSetTermValues();
    boolean that_present_termValues = true && that.isSetTermValues();
    if (this_present_termValues || that_present_termValues) {
      if (!(this_present_termValues && that_present_termValues))
        return false;
      if (!this.termValues.equals(that.termValues))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + rowSize;

    hashCode = hashCode * 8191 + columnSize;

    hashCode = hashCode * 8191 + ((isSetRowPoints()) ? 131071 : 524287);
    if (isSetRowPoints())
      hashCode = hashCode * 8191 + rowPoints.hashCode();

    hashCode = hashCode * 8191 + ((isSetRowIndexes()) ? 131071 : 524287);
    if (isSetRowIndexes())
      hashCode = hashCode * 8191 + rowIndexes.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnPoints()) ? 131071 : 524287);
    if (isSetColumnPoints())
      hashCode = hashCode * 8191 + columnPoints.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnIndexes()) ? 131071 : 524287);
    if (isSetColumnIndexes())
      hashCode = hashCode * 8191 + columnIndexes.hashCode();

    hashCode = hashCode * 8191 + ((isSetTermRows()) ? 131071 : 524287);
    if (isSetTermRows())
      hashCode = hashCode * 8191 + termRows.hashCode();

    hashCode = hashCode * 8191 + ((isSetTermColumns()) ? 131071 : 524287);
    if (isSetTermColumns())
      hashCode = hashCode * 8191 + termColumns.hashCode();

    hashCode = hashCode * 8191 + ((isSetTermValues()) ? 131071 : 524287);
    if (isSetTermValues())
      hashCode = hashCode * 8191 + termValues.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftMatrix other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRowSize()).compareTo(other.isSetRowSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowSize, other.rowSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetColumnSize()).compareTo(other.isSetColumnSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnSize, other.columnSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRowPoints()).compareTo(other.isSetRowPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowPoints, other.rowPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRowIndexes()).compareTo(other.isSetRowIndexes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowIndexes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowIndexes, other.rowIndexes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetColumnPoints()).compareTo(other.isSetColumnPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnPoints, other.columnPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetColumnIndexes()).compareTo(other.isSetColumnIndexes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnIndexes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnIndexes, other.columnIndexes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTermRows()).compareTo(other.isSetTermRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTermRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.termRows, other.termRows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTermColumns()).compareTo(other.isSetTermColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTermColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.termColumns, other.termColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTermValues()).compareTo(other.isSetTermValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTermValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.termValues, other.termValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftMatrix(");
    boolean first = true;

    sb.append("rowSize:");
    sb.append(this.rowSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnSize:");
    sb.append(this.columnSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowPoints:");
    if (this.rowPoints == null) {
      sb.append("null");
    } else {
      sb.append(this.rowPoints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowIndexes:");
    if (this.rowIndexes == null) {
      sb.append("null");
    } else {
      sb.append(this.rowIndexes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnPoints:");
    if (this.columnPoints == null) {
      sb.append("null");
    } else {
      sb.append(this.columnPoints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnIndexes:");
    if (this.columnIndexes == null) {
      sb.append("null");
    } else {
      sb.append(this.columnIndexes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("termRows:");
    if (this.termRows == null) {
      sb.append("null");
    } else {
      sb.append(this.termRows);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("termColumns:");
    if (this.termColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.termColumns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("termValues:");
    if (this.termValues == null) {
      sb.append("null");
    } else {
      sb.append(this.termValues);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftMatrixStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftMatrixStandardScheme getScheme() {
      return new ThriftMatrixStandardScheme();
    }
  }

  private static class ThriftMatrixStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftMatrix> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftMatrix struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROW_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rowSize = iprot.readI32();
              struct.setRowSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnSize = iprot.readI32();
              struct.setColumnSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROW_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.rowPoints = new java.util.ArrayList<java.lang.Integer>(_list42.size);
                int _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = iprot.readI32();
                  struct.rowPoints.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setRowPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROW_INDEXES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
                struct.rowIndexes = new java.util.ArrayList<java.lang.Integer>(_list45.size);
                int _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = iprot.readI32();
                  struct.rowIndexes.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setRowIndexesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMN_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.columnPoints = new java.util.ArrayList<java.lang.Integer>(_list48.size);
                int _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readI32();
                  struct.columnPoints.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setColumnPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLUMN_INDEXES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.columnIndexes = new java.util.ArrayList<java.lang.Integer>(_list51.size);
                int _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  _elem52 = iprot.readI32();
                  struct.columnIndexes.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setColumnIndexesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TERM_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.termRows = new java.util.ArrayList<java.lang.Integer>(_list54.size);
                int _elem55;
                for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                {
                  _elem55 = iprot.readI32();
                  struct.termRows.add(_elem55);
                }
                iprot.readListEnd();
              }
              struct.setTermRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TERM_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
                struct.termColumns = new java.util.ArrayList<java.lang.Integer>(_list57.size);
                int _elem58;
                for (int _i59 = 0; _i59 < _list57.size; ++_i59)
                {
                  _elem58 = iprot.readI32();
                  struct.termColumns.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setTermColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TERM_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.termValues = new java.util.ArrayList<java.lang.Double>(_list60.size);
                double _elem61;
                for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                {
                  _elem61 = iprot.readDouble();
                  struct.termValues.add(_elem61);
                }
                iprot.readListEnd();
              }
              struct.setTermValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftMatrix struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ROW_SIZE_FIELD_DESC);
      oprot.writeI32(struct.rowSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLUMN_SIZE_FIELD_DESC);
      oprot.writeI32(struct.columnSize);
      oprot.writeFieldEnd();
      if (struct.rowPoints != null) {
        oprot.writeFieldBegin(ROW_POINTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.rowPoints.size()));
          for (int _iter63 : struct.rowPoints)
          {
            oprot.writeI32(_iter63);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.rowIndexes != null) {
        oprot.writeFieldBegin(ROW_INDEXES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.rowIndexes.size()));
          for (int _iter64 : struct.rowIndexes)
          {
            oprot.writeI32(_iter64);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.columnPoints != null) {
        oprot.writeFieldBegin(COLUMN_POINTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.columnPoints.size()));
          for (int _iter65 : struct.columnPoints)
          {
            oprot.writeI32(_iter65);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.columnIndexes != null) {
        oprot.writeFieldBegin(COLUMN_INDEXES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.columnIndexes.size()));
          for (int _iter66 : struct.columnIndexes)
          {
            oprot.writeI32(_iter66);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.termRows != null) {
        oprot.writeFieldBegin(TERM_ROWS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.termRows.size()));
          for (int _iter67 : struct.termRows)
          {
            oprot.writeI32(_iter67);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.termColumns != null) {
        oprot.writeFieldBegin(TERM_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.termColumns.size()));
          for (int _iter68 : struct.termColumns)
          {
            oprot.writeI32(_iter68);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.termValues != null) {
        oprot.writeFieldBegin(TERM_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.termValues.size()));
          for (double _iter69 : struct.termValues)
          {
            oprot.writeDouble(_iter69);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftMatrixTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftMatrixTupleScheme getScheme() {
      return new ThriftMatrixTupleScheme();
    }
  }

  private static class ThriftMatrixTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftMatrix> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftMatrix struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRowSize()) {
        optionals.set(0);
      }
      if (struct.isSetColumnSize()) {
        optionals.set(1);
      }
      if (struct.isSetRowPoints()) {
        optionals.set(2);
      }
      if (struct.isSetRowIndexes()) {
        optionals.set(3);
      }
      if (struct.isSetColumnPoints()) {
        optionals.set(4);
      }
      if (struct.isSetColumnIndexes()) {
        optionals.set(5);
      }
      if (struct.isSetTermRows()) {
        optionals.set(6);
      }
      if (struct.isSetTermColumns()) {
        optionals.set(7);
      }
      if (struct.isSetTermValues()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetRowSize()) {
        oprot.writeI32(struct.rowSize);
      }
      if (struct.isSetColumnSize()) {
        oprot.writeI32(struct.columnSize);
      }
      if (struct.isSetRowPoints()) {
        {
          oprot.writeI32(struct.rowPoints.size());
          for (int _iter70 : struct.rowPoints)
          {
            oprot.writeI32(_iter70);
          }
        }
      }
      if (struct.isSetRowIndexes()) {
        {
          oprot.writeI32(struct.rowIndexes.size());
          for (int _iter71 : struct.rowIndexes)
          {
            oprot.writeI32(_iter71);
          }
        }
      }
      if (struct.isSetColumnPoints()) {
        {
          oprot.writeI32(struct.columnPoints.size());
          for (int _iter72 : struct.columnPoints)
          {
            oprot.writeI32(_iter72);
          }
        }
      }
      if (struct.isSetColumnIndexes()) {
        {
          oprot.writeI32(struct.columnIndexes.size());
          for (int _iter73 : struct.columnIndexes)
          {
            oprot.writeI32(_iter73);
          }
        }
      }
      if (struct.isSetTermRows()) {
        {
          oprot.writeI32(struct.termRows.size());
          for (int _iter74 : struct.termRows)
          {
            oprot.writeI32(_iter74);
          }
        }
      }
      if (struct.isSetTermColumns()) {
        {
          oprot.writeI32(struct.termColumns.size());
          for (int _iter75 : struct.termColumns)
          {
            oprot.writeI32(_iter75);
          }
        }
      }
      if (struct.isSetTermValues()) {
        {
          oprot.writeI32(struct.termValues.size());
          for (double _iter76 : struct.termValues)
          {
            oprot.writeDouble(_iter76);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftMatrix struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.rowSize = iprot.readI32();
        struct.setRowSizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.columnSize = iprot.readI32();
        struct.setColumnSizeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.rowPoints = new java.util.ArrayList<java.lang.Integer>(_list77.size);
          int _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = iprot.readI32();
            struct.rowPoints.add(_elem78);
          }
        }
        struct.setRowPointsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list80 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.rowIndexes = new java.util.ArrayList<java.lang.Integer>(_list80.size);
          int _elem81;
          for (int _i82 = 0; _i82 < _list80.size; ++_i82)
          {
            _elem81 = iprot.readI32();
            struct.rowIndexes.add(_elem81);
          }
        }
        struct.setRowIndexesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.columnPoints = new java.util.ArrayList<java.lang.Integer>(_list83.size);
          int _elem84;
          for (int _i85 = 0; _i85 < _list83.size; ++_i85)
          {
            _elem84 = iprot.readI32();
            struct.columnPoints.add(_elem84);
          }
        }
        struct.setColumnPointsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list86 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.columnIndexes = new java.util.ArrayList<java.lang.Integer>(_list86.size);
          int _elem87;
          for (int _i88 = 0; _i88 < _list86.size; ++_i88)
          {
            _elem87 = iprot.readI32();
            struct.columnIndexes.add(_elem87);
          }
        }
        struct.setColumnIndexesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.termRows = new java.util.ArrayList<java.lang.Integer>(_list89.size);
          int _elem90;
          for (int _i91 = 0; _i91 < _list89.size; ++_i91)
          {
            _elem90 = iprot.readI32();
            struct.termRows.add(_elem90);
          }
        }
        struct.setTermRowsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.termColumns = new java.util.ArrayList<java.lang.Integer>(_list92.size);
          int _elem93;
          for (int _i94 = 0; _i94 < _list92.size; ++_i94)
          {
            _elem93 = iprot.readI32();
            struct.termColumns.add(_elem93);
          }
        }
        struct.setTermColumnsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.termValues = new java.util.ArrayList<java.lang.Double>(_list95.size);
          double _elem96;
          for (int _i97 = 0; _i97 < _list95.size; ++_i97)
          {
            _elem96 = iprot.readDouble();
            struct.termValues.add(_elem96);
          }
        }
        struct.setTermValuesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

