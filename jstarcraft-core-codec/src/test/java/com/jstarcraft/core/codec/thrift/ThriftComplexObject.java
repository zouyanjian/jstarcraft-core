/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jstarcraft.core.codec.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-24")
public class ThriftComplexObject implements org.apache.thrift.TBase<ThriftComplexObject, ThriftComplexObject._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftComplexObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftComplexObject");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("names", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("money", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("currencies", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField INSTANT_FIELD_DESC = new org.apache.thrift.protocol.TField("instant", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField RACE_FIELD_DESC = new org.apache.thrift.protocol.TField("race", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField MOCK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mockList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField MOCK_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("mockMap", org.apache.thrift.protocol.TType.MAP, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftComplexObjectStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftComplexObjectTupleSchemeFactory();

  public int id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String firstName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String lastName; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> names; // required
  public int money; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> currencies; // required
  public long instant; // required
  /**
   * 
   * @see ThriftEnumeration
   */
  public @org.apache.thrift.annotation.Nullable ThriftEnumeration race; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> type; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<ThriftSimpleObject> mockList; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,ThriftSimpleObject> mockMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FIRST_NAME((short)2, "firstName"),
    LAST_NAME((short)3, "lastName"),
    NAMES((short)4, "names"),
    MONEY((short)5, "money"),
    CURRENCIES((short)6, "currencies"),
    INSTANT((short)7, "instant"),
    /**
     * 
     * @see ThriftEnumeration
     */
    RACE((short)8, "race"),
    TYPE((short)9, "type"),
    MOCK_LIST((short)10, "mockList"),
    MOCK_MAP((short)11, "mockMap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FIRST_NAME
          return FIRST_NAME;
        case 3: // LAST_NAME
          return LAST_NAME;
        case 4: // NAMES
          return NAMES;
        case 5: // MONEY
          return MONEY;
        case 6: // CURRENCIES
          return CURRENCIES;
        case 7: // INSTANT
          return INSTANT;
        case 8: // RACE
          return RACE;
        case 9: // TYPE
          return TYPE;
        case 10: // MOCK_LIST
          return MOCK_LIST;
        case 11: // MOCK_MAP
          return MOCK_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MONEY_ISSET_ID = 1;
  private static final int __INSTANT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("lastName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAMES, new org.apache.thrift.meta_data.FieldMetaData("names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MONEY, new org.apache.thrift.meta_data.FieldMetaData("money", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENCIES, new org.apache.thrift.meta_data.FieldMetaData("currencies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.INSTANT, new org.apache.thrift.meta_data.FieldMetaData("instant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RACE, new org.apache.thrift.meta_data.FieldMetaData("race", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftEnumeration.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.MOCK_LIST, new org.apache.thrift.meta_data.FieldMetaData("mockList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftSimpleObject"))));
    tmpMap.put(_Fields.MOCK_MAP, new org.apache.thrift.meta_data.FieldMetaData("mockMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftSimpleObject"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftComplexObject.class, metaDataMap);
  }

  public ThriftComplexObject() {
  }

  public ThriftComplexObject(
    int id,
    java.lang.String firstName,
    java.lang.String lastName,
    java.util.List<java.lang.String> names,
    int money,
    java.util.List<java.lang.Integer> currencies,
    long instant,
    ThriftEnumeration race,
    java.util.List<java.lang.Integer> type,
    java.util.List<ThriftSimpleObject> mockList,
    java.util.Map<java.lang.Integer,ThriftSimpleObject> mockMap)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.firstName = firstName;
    this.lastName = lastName;
    this.names = names;
    this.money = money;
    setMoneyIsSet(true);
    this.currencies = currencies;
    this.instant = instant;
    setInstantIsSet(true);
    this.race = race;
    this.type = type;
    this.mockList = mockList;
    this.mockMap = mockMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftComplexObject(ThriftComplexObject other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetFirstName()) {
      this.firstName = other.firstName;
    }
    if (other.isSetLastName()) {
      this.lastName = other.lastName;
    }
    if (other.isSetNames()) {
      java.util.List<java.lang.String> __this__names = new java.util.ArrayList<java.lang.String>(other.names);
      this.names = __this__names;
    }
    this.money = other.money;
    if (other.isSetCurrencies()) {
      java.util.List<java.lang.Integer> __this__currencies = new java.util.ArrayList<java.lang.Integer>(other.currencies);
      this.currencies = __this__currencies;
    }
    this.instant = other.instant;
    if (other.isSetRace()) {
      this.race = other.race;
    }
    if (other.isSetType()) {
      java.util.List<java.lang.Integer> __this__type = new java.util.ArrayList<java.lang.Integer>(other.type);
      this.type = __this__type;
    }
    if (other.isSetMockList()) {
      java.util.List<ThriftSimpleObject> __this__mockList = new java.util.ArrayList<ThriftSimpleObject>(other.mockList.size());
      for (ThriftSimpleObject other_element : other.mockList) {
        __this__mockList.add(new ThriftSimpleObject(other_element));
      }
      this.mockList = __this__mockList;
    }
    if (other.isSetMockMap()) {
      java.util.Map<java.lang.Integer,ThriftSimpleObject> __this__mockMap = new java.util.HashMap<java.lang.Integer,ThriftSimpleObject>(other.mockMap.size());
      for (java.util.Map.Entry<java.lang.Integer, ThriftSimpleObject> other_element : other.mockMap.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        ThriftSimpleObject other_element_value = other_element.getValue();

        java.lang.Integer __this__mockMap_copy_key = other_element_key;

        ThriftSimpleObject __this__mockMap_copy_value = new ThriftSimpleObject(other_element_value);

        __this__mockMap.put(__this__mockMap_copy_key, __this__mockMap_copy_value);
      }
      this.mockMap = __this__mockMap;
    }
  }

  public ThriftComplexObject deepCopy() {
    return new ThriftComplexObject(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.firstName = null;
    this.lastName = null;
    this.names = null;
    setMoneyIsSet(false);
    this.money = 0;
    this.currencies = null;
    setInstantIsSet(false);
    this.instant = 0;
    this.race = null;
    this.type = null;
    this.mockList = null;
    this.mockMap = null;
  }

  public int getId() {
    return this.id;
  }

  public ThriftComplexObject setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFirstName() {
    return this.firstName;
  }

  public ThriftComplexObject setFirstName(@org.apache.thrift.annotation.Nullable java.lang.String firstName) {
    this.firstName = firstName;
    return this;
  }

  public void unsetFirstName() {
    this.firstName = null;
  }

  /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstName() {
    return this.firstName != null;
  }

  public void setFirstNameIsSet(boolean value) {
    if (!value) {
      this.firstName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLastName() {
    return this.lastName;
  }

  public ThriftComplexObject setLastName(@org.apache.thrift.annotation.Nullable java.lang.String lastName) {
    this.lastName = lastName;
    return this;
  }

  public void unsetLastName() {
    this.lastName = null;
  }

  /** Returns true if field lastName is set (has been assigned a value) and false otherwise */
  public boolean isSetLastName() {
    return this.lastName != null;
  }

  public void setLastNameIsSet(boolean value) {
    if (!value) {
      this.lastName = null;
    }
  }

  public int getNamesSize() {
    return (this.names == null) ? 0 : this.names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getNamesIterator() {
    return (this.names == null) ? null : this.names.iterator();
  }

  public void addToNames(java.lang.String elem) {
    if (this.names == null) {
      this.names = new java.util.ArrayList<java.lang.String>();
    }
    this.names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getNames() {
    return this.names;
  }

  public ThriftComplexObject setNames(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> names) {
    this.names = names;
    return this;
  }

  public void unsetNames() {
    this.names = null;
  }

  /** Returns true if field names is set (has been assigned a value) and false otherwise */
  public boolean isSetNames() {
    return this.names != null;
  }

  public void setNamesIsSet(boolean value) {
    if (!value) {
      this.names = null;
    }
  }

  public int getMoney() {
    return this.money;
  }

  public ThriftComplexObject setMoney(int money) {
    this.money = money;
    setMoneyIsSet(true);
    return this;
  }

  public void unsetMoney() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  /** Returns true if field money is set (has been assigned a value) and false otherwise */
  public boolean isSetMoney() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MONEY_ISSET_ID);
  }

  public void setMoneyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MONEY_ISSET_ID, value);
  }

  public int getCurrenciesSize() {
    return (this.currencies == null) ? 0 : this.currencies.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getCurrenciesIterator() {
    return (this.currencies == null) ? null : this.currencies.iterator();
  }

  public void addToCurrencies(int elem) {
    if (this.currencies == null) {
      this.currencies = new java.util.ArrayList<java.lang.Integer>();
    }
    this.currencies.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getCurrencies() {
    return this.currencies;
  }

  public ThriftComplexObject setCurrencies(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> currencies) {
    this.currencies = currencies;
    return this;
  }

  public void unsetCurrencies() {
    this.currencies = null;
  }

  /** Returns true if field currencies is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencies() {
    return this.currencies != null;
  }

  public void setCurrenciesIsSet(boolean value) {
    if (!value) {
      this.currencies = null;
    }
  }

  public long getInstant() {
    return this.instant;
  }

  public ThriftComplexObject setInstant(long instant) {
    this.instant = instant;
    setInstantIsSet(true);
    return this;
  }

  public void unsetInstant() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INSTANT_ISSET_ID);
  }

  /** Returns true if field instant is set (has been assigned a value) and false otherwise */
  public boolean isSetInstant() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INSTANT_ISSET_ID);
  }

  public void setInstantIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INSTANT_ISSET_ID, value);
  }

  /**
   * 
   * @see ThriftEnumeration
   */
  @org.apache.thrift.annotation.Nullable
  public ThriftEnumeration getRace() {
    return this.race;
  }

  /**
   * 
   * @see ThriftEnumeration
   */
  public ThriftComplexObject setRace(@org.apache.thrift.annotation.Nullable ThriftEnumeration race) {
    this.race = race;
    return this;
  }

  public void unsetRace() {
    this.race = null;
  }

  /** Returns true if field race is set (has been assigned a value) and false otherwise */
  public boolean isSetRace() {
    return this.race != null;
  }

  public void setRaceIsSet(boolean value) {
    if (!value) {
      this.race = null;
    }
  }

  public int getTypeSize() {
    return (this.type == null) ? 0 : this.type.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getTypeIterator() {
    return (this.type == null) ? null : this.type.iterator();
  }

  public void addToType(int elem) {
    if (this.type == null) {
      this.type = new java.util.ArrayList<java.lang.Integer>();
    }
    this.type.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getType() {
    return this.type;
  }

  public ThriftComplexObject setType(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getMockListSize() {
    return (this.mockList == null) ? 0 : this.mockList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ThriftSimpleObject> getMockListIterator() {
    return (this.mockList == null) ? null : this.mockList.iterator();
  }

  public void addToMockList(ThriftSimpleObject elem) {
    if (this.mockList == null) {
      this.mockList = new java.util.ArrayList<ThriftSimpleObject>();
    }
    this.mockList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ThriftSimpleObject> getMockList() {
    return this.mockList;
  }

  public ThriftComplexObject setMockList(@org.apache.thrift.annotation.Nullable java.util.List<ThriftSimpleObject> mockList) {
    this.mockList = mockList;
    return this;
  }

  public void unsetMockList() {
    this.mockList = null;
  }

  /** Returns true if field mockList is set (has been assigned a value) and false otherwise */
  public boolean isSetMockList() {
    return this.mockList != null;
  }

  public void setMockListIsSet(boolean value) {
    if (!value) {
      this.mockList = null;
    }
  }

  public int getMockMapSize() {
    return (this.mockMap == null) ? 0 : this.mockMap.size();
  }

  public void putToMockMap(int key, ThriftSimpleObject val) {
    if (this.mockMap == null) {
      this.mockMap = new java.util.HashMap<java.lang.Integer,ThriftSimpleObject>();
    }
    this.mockMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,ThriftSimpleObject> getMockMap() {
    return this.mockMap;
  }

  public ThriftComplexObject setMockMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,ThriftSimpleObject> mockMap) {
    this.mockMap = mockMap;
    return this;
  }

  public void unsetMockMap() {
    this.mockMap = null;
  }

  /** Returns true if field mockMap is set (has been assigned a value) and false otherwise */
  public boolean isSetMockMap() {
    return this.mockMap != null;
  }

  public void setMockMapIsSet(boolean value) {
    if (!value) {
      this.mockMap = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case FIRST_NAME:
      if (value == null) {
        unsetFirstName();
      } else {
        setFirstName((java.lang.String)value);
      }
      break;

    case LAST_NAME:
      if (value == null) {
        unsetLastName();
      } else {
        setLastName((java.lang.String)value);
      }
      break;

    case NAMES:
      if (value == null) {
        unsetNames();
      } else {
        setNames((java.util.List<java.lang.String>)value);
      }
      break;

    case MONEY:
      if (value == null) {
        unsetMoney();
      } else {
        setMoney((java.lang.Integer)value);
      }
      break;

    case CURRENCIES:
      if (value == null) {
        unsetCurrencies();
      } else {
        setCurrencies((java.util.List<java.lang.Integer>)value);
      }
      break;

    case INSTANT:
      if (value == null) {
        unsetInstant();
      } else {
        setInstant((java.lang.Long)value);
      }
      break;

    case RACE:
      if (value == null) {
        unsetRace();
      } else {
        setRace((ThriftEnumeration)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.util.List<java.lang.Integer>)value);
      }
      break;

    case MOCK_LIST:
      if (value == null) {
        unsetMockList();
      } else {
        setMockList((java.util.List<ThriftSimpleObject>)value);
      }
      break;

    case MOCK_MAP:
      if (value == null) {
        unsetMockMap();
      } else {
        setMockMap((java.util.Map<java.lang.Integer,ThriftSimpleObject>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case FIRST_NAME:
      return getFirstName();

    case LAST_NAME:
      return getLastName();

    case NAMES:
      return getNames();

    case MONEY:
      return getMoney();

    case CURRENCIES:
      return getCurrencies();

    case INSTANT:
      return getInstant();

    case RACE:
      return getRace();

    case TYPE:
      return getType();

    case MOCK_LIST:
      return getMockList();

    case MOCK_MAP:
      return getMockMap();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FIRST_NAME:
      return isSetFirstName();
    case LAST_NAME:
      return isSetLastName();
    case NAMES:
      return isSetNames();
    case MONEY:
      return isSetMoney();
    case CURRENCIES:
      return isSetCurrencies();
    case INSTANT:
      return isSetInstant();
    case RACE:
      return isSetRace();
    case TYPE:
      return isSetType();
    case MOCK_LIST:
      return isSetMockList();
    case MOCK_MAP:
      return isSetMockMap();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftComplexObject)
      return this.equals((ThriftComplexObject)that);
    return false;
  }

  public boolean equals(ThriftComplexObject that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_firstName = true && this.isSetFirstName();
    boolean that_present_firstName = true && that.isSetFirstName();
    if (this_present_firstName || that_present_firstName) {
      if (!(this_present_firstName && that_present_firstName))
        return false;
      if (!this.firstName.equals(that.firstName))
        return false;
    }

    boolean this_present_lastName = true && this.isSetLastName();
    boolean that_present_lastName = true && that.isSetLastName();
    if (this_present_lastName || that_present_lastName) {
      if (!(this_present_lastName && that_present_lastName))
        return false;
      if (!this.lastName.equals(that.lastName))
        return false;
    }

    boolean this_present_names = true && this.isSetNames();
    boolean that_present_names = true && that.isSetNames();
    if (this_present_names || that_present_names) {
      if (!(this_present_names && that_present_names))
        return false;
      if (!this.names.equals(that.names))
        return false;
    }

    boolean this_present_money = true;
    boolean that_present_money = true;
    if (this_present_money || that_present_money) {
      if (!(this_present_money && that_present_money))
        return false;
      if (this.money != that.money)
        return false;
    }

    boolean this_present_currencies = true && this.isSetCurrencies();
    boolean that_present_currencies = true && that.isSetCurrencies();
    if (this_present_currencies || that_present_currencies) {
      if (!(this_present_currencies && that_present_currencies))
        return false;
      if (!this.currencies.equals(that.currencies))
        return false;
    }

    boolean this_present_instant = true;
    boolean that_present_instant = true;
    if (this_present_instant || that_present_instant) {
      if (!(this_present_instant && that_present_instant))
        return false;
      if (this.instant != that.instant)
        return false;
    }

    boolean this_present_race = true && this.isSetRace();
    boolean that_present_race = true && that.isSetRace();
    if (this_present_race || that_present_race) {
      if (!(this_present_race && that_present_race))
        return false;
      if (!this.race.equals(that.race))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_mockList = true && this.isSetMockList();
    boolean that_present_mockList = true && that.isSetMockList();
    if (this_present_mockList || that_present_mockList) {
      if (!(this_present_mockList && that_present_mockList))
        return false;
      if (!this.mockList.equals(that.mockList))
        return false;
    }

    boolean this_present_mockMap = true && this.isSetMockMap();
    boolean that_present_mockMap = true && that.isSetMockMap();
    if (this_present_mockMap || that_present_mockMap) {
      if (!(this_present_mockMap && that_present_mockMap))
        return false;
      if (!this.mockMap.equals(that.mockMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetFirstName()) ? 131071 : 524287);
    if (isSetFirstName())
      hashCode = hashCode * 8191 + firstName.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastName()) ? 131071 : 524287);
    if (isSetLastName())
      hashCode = hashCode * 8191 + lastName.hashCode();

    hashCode = hashCode * 8191 + ((isSetNames()) ? 131071 : 524287);
    if (isSetNames())
      hashCode = hashCode * 8191 + names.hashCode();

    hashCode = hashCode * 8191 + money;

    hashCode = hashCode * 8191 + ((isSetCurrencies()) ? 131071 : 524287);
    if (isSetCurrencies())
      hashCode = hashCode * 8191 + currencies.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(instant);

    hashCode = hashCode * 8191 + ((isSetRace()) ? 131071 : 524287);
    if (isSetRace())
      hashCode = hashCode * 8191 + race.getValue();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetMockList()) ? 131071 : 524287);
    if (isSetMockList())
      hashCode = hashCode * 8191 + mockList.hashCode();

    hashCode = hashCode * 8191 + ((isSetMockMap()) ? 131071 : 524287);
    if (isSetMockMap())
      hashCode = hashCode * 8191 + mockMap.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftComplexObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFirstName()).compareTo(other.isSetFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, other.firstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastName()).compareTo(other.isSetLastName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastName, other.lastName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNames()).compareTo(other.isSetNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.names, other.names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMoney()).compareTo(other.isSetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.money, other.money);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrencies()).compareTo(other.isSetCurrencies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencies, other.currencies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInstant()).compareTo(other.isSetInstant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instant, other.instant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRace()).compareTo(other.isSetRace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.race, other.race);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMockList()).compareTo(other.isSetMockList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMockList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mockList, other.mockList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMockMap()).compareTo(other.isSetMockMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMockMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mockMap, other.mockMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftComplexObject(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstName:");
    if (this.firstName == null) {
      sb.append("null");
    } else {
      sb.append(this.firstName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastName:");
    if (this.lastName == null) {
      sb.append("null");
    } else {
      sb.append(this.lastName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("names:");
    if (this.names == null) {
      sb.append("null");
    } else {
      sb.append(this.names);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("money:");
    sb.append(this.money);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currencies:");
    if (this.currencies == null) {
      sb.append("null");
    } else {
      sb.append(this.currencies);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instant:");
    sb.append(this.instant);
    first = false;
    if (!first) sb.append(", ");
    sb.append("race:");
    if (this.race == null) {
      sb.append("null");
    } else {
      sb.append(this.race);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mockList:");
    if (this.mockList == null) {
      sb.append("null");
    } else {
      sb.append(this.mockList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mockMap:");
    if (this.mockMap == null) {
      sb.append("null");
    } else {
      sb.append(this.mockMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftComplexObjectStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftComplexObjectStandardScheme getScheme() {
      return new ThriftComplexObjectStandardScheme();
    }
  }

  private static class ThriftComplexObjectStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftComplexObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftComplexObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstName = iprot.readString();
              struct.setFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastName = iprot.readString();
              struct.setLastNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.names = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.names.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.money = iprot.readI32();
              struct.setMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENCIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.currencies = new java.util.ArrayList<java.lang.Integer>(_list3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.currencies.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setCurrenciesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INSTANT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.instant = iprot.readI64();
              struct.setInstantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.race = com.jstarcraft.core.codec.thrift.ThriftEnumeration.findByValue(iprot.readI32());
              struct.setRaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.type = new java.util.ArrayList<java.lang.Integer>(_list6.size);
                int _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI32();
                  struct.type.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MOCK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.mockList = new java.util.ArrayList<ThriftSimpleObject>(_list9.size);
                @org.apache.thrift.annotation.Nullable ThriftSimpleObject _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = new ThriftSimpleObject();
                  _elem10.read(iprot);
                  struct.mockList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setMockListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MOCK_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                struct.mockMap = new java.util.HashMap<java.lang.Integer,ThriftSimpleObject>(2*_map12.size);
                int _key13;
                @org.apache.thrift.annotation.Nullable ThriftSimpleObject _val14;
                for (int _i15 = 0; _i15 < _map12.size; ++_i15)
                {
                  _key13 = iprot.readI32();
                  _val14 = new ThriftSimpleObject();
                  _val14.read(iprot);
                  struct.mockMap.put(_key13, _val14);
                }
                iprot.readMapEnd();
              }
              struct.setMockMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftComplexObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.firstName != null) {
        oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.firstName);
        oprot.writeFieldEnd();
      }
      if (struct.lastName != null) {
        oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
        oprot.writeString(struct.lastName);
        oprot.writeFieldEnd();
      }
      if (struct.names != null) {
        oprot.writeFieldBegin(NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.names.size()));
          for (java.lang.String _iter16 : struct.names)
          {
            oprot.writeString(_iter16);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONEY_FIELD_DESC);
      oprot.writeI32(struct.money);
      oprot.writeFieldEnd();
      if (struct.currencies != null) {
        oprot.writeFieldBegin(CURRENCIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.currencies.size()));
          for (int _iter17 : struct.currencies)
          {
            oprot.writeI32(_iter17);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INSTANT_FIELD_DESC);
      oprot.writeI64(struct.instant);
      oprot.writeFieldEnd();
      if (struct.race != null) {
        oprot.writeFieldBegin(RACE_FIELD_DESC);
        oprot.writeI32(struct.race.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.type.size()));
          for (int _iter18 : struct.type)
          {
            oprot.writeI32(_iter18);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mockList != null) {
        oprot.writeFieldBegin(MOCK_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mockList.size()));
          for (ThriftSimpleObject _iter19 : struct.mockList)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mockMap != null) {
        oprot.writeFieldBegin(MOCK_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.mockMap.size()));
          for (java.util.Map.Entry<java.lang.Integer, ThriftSimpleObject> _iter20 : struct.mockMap.entrySet())
          {
            oprot.writeI32(_iter20.getKey());
            _iter20.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftComplexObjectTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftComplexObjectTupleScheme getScheme() {
      return new ThriftComplexObjectTupleScheme();
    }
  }

  private static class ThriftComplexObjectTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftComplexObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftComplexObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetFirstName()) {
        optionals.set(1);
      }
      if (struct.isSetLastName()) {
        optionals.set(2);
      }
      if (struct.isSetNames()) {
        optionals.set(3);
      }
      if (struct.isSetMoney()) {
        optionals.set(4);
      }
      if (struct.isSetCurrencies()) {
        optionals.set(5);
      }
      if (struct.isSetInstant()) {
        optionals.set(6);
      }
      if (struct.isSetRace()) {
        optionals.set(7);
      }
      if (struct.isSetType()) {
        optionals.set(8);
      }
      if (struct.isSetMockList()) {
        optionals.set(9);
      }
      if (struct.isSetMockMap()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetFirstName()) {
        oprot.writeString(struct.firstName);
      }
      if (struct.isSetLastName()) {
        oprot.writeString(struct.lastName);
      }
      if (struct.isSetNames()) {
        {
          oprot.writeI32(struct.names.size());
          for (java.lang.String _iter21 : struct.names)
          {
            oprot.writeString(_iter21);
          }
        }
      }
      if (struct.isSetMoney()) {
        oprot.writeI32(struct.money);
      }
      if (struct.isSetCurrencies()) {
        {
          oprot.writeI32(struct.currencies.size());
          for (int _iter22 : struct.currencies)
          {
            oprot.writeI32(_iter22);
          }
        }
      }
      if (struct.isSetInstant()) {
        oprot.writeI64(struct.instant);
      }
      if (struct.isSetRace()) {
        oprot.writeI32(struct.race.getValue());
      }
      if (struct.isSetType()) {
        {
          oprot.writeI32(struct.type.size());
          for (int _iter23 : struct.type)
          {
            oprot.writeI32(_iter23);
          }
        }
      }
      if (struct.isSetMockList()) {
        {
          oprot.writeI32(struct.mockList.size());
          for (ThriftSimpleObject _iter24 : struct.mockList)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetMockMap()) {
        {
          oprot.writeI32(struct.mockMap.size());
          for (java.util.Map.Entry<java.lang.Integer, ThriftSimpleObject> _iter25 : struct.mockMap.entrySet())
          {
            oprot.writeI32(_iter25.getKey());
            _iter25.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftComplexObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.firstName = iprot.readString();
        struct.setFirstNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastName = iprot.readString();
        struct.setLastNameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.names = new java.util.ArrayList<java.lang.String>(_list26.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = iprot.readString();
            struct.names.add(_elem27);
          }
        }
        struct.setNamesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.money = iprot.readI32();
        struct.setMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.currencies = new java.util.ArrayList<java.lang.Integer>(_list29.size);
          int _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readI32();
            struct.currencies.add(_elem30);
          }
        }
        struct.setCurrenciesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.instant = iprot.readI64();
        struct.setInstantIsSet(true);
      }
      if (incoming.get(7)) {
        struct.race = com.jstarcraft.core.codec.thrift.ThriftEnumeration.findByValue(iprot.readI32());
        struct.setRaceIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list32 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.type = new java.util.ArrayList<java.lang.Integer>(_list32.size);
          int _elem33;
          for (int _i34 = 0; _i34 < _list32.size; ++_i34)
          {
            _elem33 = iprot.readI32();
            struct.type.add(_elem33);
          }
        }
        struct.setTypeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list35 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mockList = new java.util.ArrayList<ThriftSimpleObject>(_list35.size);
          @org.apache.thrift.annotation.Nullable ThriftSimpleObject _elem36;
          for (int _i37 = 0; _i37 < _list35.size; ++_i37)
          {
            _elem36 = new ThriftSimpleObject();
            _elem36.read(iprot);
            struct.mockList.add(_elem36);
          }
        }
        struct.setMockListIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mockMap = new java.util.HashMap<java.lang.Integer,ThriftSimpleObject>(2*_map38.size);
          int _key39;
          @org.apache.thrift.annotation.Nullable ThriftSimpleObject _val40;
          for (int _i41 = 0; _i41 < _map38.size; ++_i41)
          {
            _key39 = iprot.readI32();
            _val40 = new ThriftSimpleObject();
            _val40.read(iprot);
            struct.mockMap.put(_key39, _val40);
          }
        }
        struct.setMockMapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

